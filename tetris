#!/bin/sh

# Tetris game written in pure sh
# 
# I tried to follow the Tetris Guideline(2009). 
# URL: [Tetris Guideline. Tetris Wiki. accessed at 2020-05-23](https://tetris.fandom.com/wiki/Tetris_Guideline)
#
# This script is based on bash-tetris (Author: Kirill Timofeev <kt97679@gmail.com>)
# Thank you!
#
# Linux   sh | o
# FreeBSD sh | o
# BusyBox sh | o
# Solaris sh | x
# 
# Author: IOE <Github: ContentsViewer>

set -u # non initialized variable is an error

# 2 signals are used: SIGUSR1 to decrease delay after level up and SIGUSR2 to quit
# they are sent to all instances of this script
# because of that we should process them in each instance
# in this instance we are ignoring both signals
# in shell enviroment, should Drop the SIG prefix, just input the signal name.
trap '' USR1 USR2

# Those are commands sent to controller by key press processing code
# In controller they are used as index to retrieve actual function from array
QUIT=0
RIGHT=1
LEFT=2
FALL=3
SOFT_DROP=4
HARD_DROP=5
ROTATE_CW=6
ROTATE_CCW=7
HOLD=8
TOGGLE_COLOR=9
TOGGLE_HELP=10
RELOAD_SCREEN=11

# The normal Fall Speed is defined here to be the time it takes a Tetrimino to fall by one line. 
# The current level of the game determines the normal Fall Speed using the following equation:
# (0.8 - ((level - 1) * 0.007))^(level-1)
FALL_SPEED_LEVEL_1=1
FALL_SPEED_LEVEL_2=0.793
FALL_SPEED_LEVEL_3=0.618
FALL_SPEED_LEVEL_4=0.473
FALL_SPEED_LEVEL_5=0.355
FALL_SPEED_LEVEL_6=0.262
FALL_SPEED_LEVEL_7=0.190
FALL_SPEED_LEVEL_8=0.135
FALL_SPEED_LEVEL_9=0.094
FALL_SPEED_LEVEL_10=0.064
FALL_SPEED_LEVEL_11=0.043
FALL_SPEED_LEVEL_12=0.028
FALL_SPEED_LEVEL_13=0.018
FALL_SPEED_LEVEL_14=0.011
FALL_SPEED_LEVEL_15=0.007
LEVEL_MAX=15

# color codes
RED=1
GREEN=2
YELLOW=3
BLUE=4
MAGENTA=5
CYAN=6
WHITE=7
ORANGE=208

# Those are Tetrimino type
O_TETORIMINO=0
I_TETORIMINO=1
T_TETORIMINO=2
L_TETORIMINO=3
J_TETORIMINO=4
S_TETORIMINO=5
Z_TETORIMINO=6

# Those are the facing
# Tetorimino has four facings
NORTH=0
EAST=1
SOUTH=2
WEST=3

# Location and size of playfield, color and border
PLAYFIELD_W=10
PLAYFIELD_H=20
PLAYFIELD_X=19
PLAYFIELD_Y=2
BORDER_COLOR=$WHITE

# Location and color of score information
SCORE_X=5
SCORE_Y=7
SCORE_COLOR=$GREEN

ACTION_NONE=0
ACTION_SINGLE=1
ACTION_DOUBLE=2
ACTION_TRIPLE=3
ACTION_TETRIS=4
ACTION_SOFT_DROP=5
ACTION_HARD_DROP=6

eval SCORE_FACTOR_"$ACTION_NONE"=0
eval SCORE_FACTOR_"$ACTION_SINGLE"=100
eval SCORE_FACTOR_"$ACTION_DOUBLE"=300
eval SCORE_FACTOR_"$ACTION_TRIPLE"=500
eval SCORE_FACTOR_"$ACTION_TETRIS"=800
eval SCORE_FACTOR_"$ACTION_SOFT_DROP"=1
eval SCORE_FACTOR_"$ACTION_HARD_DROP"=2

# Location and color of help information
HELP_X=56
HELP_Y=10
HELP_COLOR=$YELLOW

# Next piece location
NEXT_X=42
NEXT_Y=2
NEXT_MAX=7

# Hold piece location
HOLD_X=9
HOLD_Y=2

# Location of 'game over' in the end of the game
GAMEOVER_X=$((PLAYFIELD_X + PLAYFIELD_W / 2))
GAMEOVER_Y=$((PLAYFIELD_Y + PLAYFIELD_H / 2))

# piece starting location
START_X=3
START_Y=21

# this array holds all possible pieces that can be used in the game
# each piece consists of 4 cells(minos)
# each string is sequence of relative xy coordinates

# O-Tetrimino
eval piece_"$O_TETORIMINO"_color=\"$YELLOW\"
eval piece_"$O_TETORIMINO"_minos_"$NORTH"=\'1 0 2 0 1 1 2 1\'
eval piece_"$O_TETORIMINO"_minos_"$EAST"=\'1 0 2 0 1 1 2 1\'
eval piece_"$O_TETORIMINO"_minos_"$SOUTH"=\'1 0 2 0 1 1 2 1\'
eval piece_"$O_TETORIMINO"_minos_"$WEST"=\'1 0 2 0 1 1 2 1\'

# I-Tetorimino
eval piece_"$I_TETORIMINO"_color=\"$CYAN\"
eval piece_"$I_TETORIMINO"_minos_"$NORTH"=\'0 1 1 1 2 1 3 1\'
eval piece_"$I_TETORIMINO"_minos_"$EAST"=\'2 0 2 1 2 2 2 3\'
eval piece_"$I_TETORIMINO"_minos_"$SOUTH"=\'0 2 1 2 2 2 3 2\'
eval piece_"$I_TETORIMINO"_minos_"$WEST"=\'1 0 1 1 1 2 1 3\'

# T-Tetorimino
eval piece_"$T_TETORIMINO"_color=\"$MAGENTA\"
eval piece_"$T_TETORIMINO"_minos_"$NORTH"=\'1 0 0 1 1 1 2 1\'
eval piece_"$T_TETORIMINO"_minos_"$EAST"=\'1 0 1 1 2 1 1 2\'
eval piece_"$T_TETORIMINO"_minos_"$SOUTH"=\'0 1 1 1 2 1 1 2\'
eval piece_"$T_TETORIMINO"_minos_"$WEST"=\'1 0 0 1 1 1 1 2\'

# L-Tetorimino
eval piece_"$L_TETORIMINO"_color=\"$ORANGE\"
eval piece_"$L_TETORIMINO"_minos_"$NORTH"=\'2 0 0 1 1 1 2 1\'
eval piece_"$L_TETORIMINO"_minos_"$EAST"=\'1 0 1 1 1 2 2 2\'
eval piece_"$L_TETORIMINO"_minos_"$SOUTH"=\'0 1 1 1 2 1 0 2\'
eval piece_"$L_TETORIMINO"_minos_"$WEST"=\'0 0 1 0 1 1 1 2\'

# J-Tetorimino
eval piece_"$J_TETORIMINO"_color=\"$BLUE\"
eval piece_"$J_TETORIMINO"_minos_"$NORTH"=\'0 0 0 1 1 1 2 1\'
eval piece_"$J_TETORIMINO"_minos_"$EAST"=\'1 0 2 0 1 1 1 2\'
eval piece_"$J_TETORIMINO"_minos_"$SOUTH"=\'0 1 1 1 2 1 2 2\'
eval piece_"$J_TETORIMINO"_minos_"$WEST"=\'1 0 1 1 0 2 1 2\'

# S-Tetorimino
eval piece_"$S_TETORIMINO"_color=\"$GREEN\"
eval piece_"$S_TETORIMINO"_minos_"$NORTH"=\'1 0 2 0 0 1 1 1\'
eval piece_"$S_TETORIMINO"_minos_"$EAST"=\'1 0 1 1 2 1 2 2\'
eval piece_"$S_TETORIMINO"_minos_"$SOUTH"=\'1 1 2 1 0 2 1 2\'
eval piece_"$S_TETORIMINO"_minos_"$WEST"=\'0 0 0 1 1 1 1 2\'

# Z-Tetorimino
eval piece_"$Z_TETORIMINO"_color=\"$RED\"
eval piece_"$Z_TETORIMINO"_minos_"$NORTH"=\"0 0 1 0 1 1 2 1\"
eval piece_"$Z_TETORIMINO"_minos_"$EAST"=\"2 0 1 1 2 1 1 2\"
eval piece_"$Z_TETORIMINO"_minos_"$SOUTH"=\"0 1 1 1 1 2 2 2\"
eval piece_"$Z_TETORIMINO"_minos_"$WEST"=\"1 0 0 1 1 1 0 2\"

help='
←         Move Left or Right
→         Move Right
↑, x      Rotate Clockwise
z         Rotate Counter-Clockwise
c         Hold
↓         Soft Drop
Space     Hard Drop
R         Reload Screen
C         Toggle Color
H         Toggle Help
Q, ESCx2  Quit
'
help_on=1 # if this flag is 1 help is shown, if -1, hide

no_color=true    # do we use color or not
showtime=true    # controller runs while this flag is true
empty_cell=' .'  # how we draw empty cell
filled_cell='[]' # how we draw filled cell

# the queue of the next tetoriminos to be placed.
# the reference says the next six tetrimonos should be shown.
next_queue=''

# the hold queue allows the player to hold a falling tetorimino for as long as they wish.
hold_queue=''

# Tetris uses a “bag” system to determine the sequence of Tetriminos that appear during game
# play. This system allows for equal distribution among the seven Tetriminos.
# 
# The seven different Tetriminos are placed into a virtual bag, then shuffled into a random order.
# This order is the sequence that the bag “feeds” the Next Queue. Every time a new Tetrimino is
# generated and starts its fall within the Matrix, the Tetrimino at the front of the line in the bag is
# placed at the end of the Next Queue, pushing all Tetriminos in the Next Queue forward by one.
# The bag is refilled and reshuffled once it is empty.
bag=''

# the Variable Goal System requires that the player clears 5 lines at level 1, 10 lines at
# level 2, 15 at level 3 and so on, adding an additional five lines to the Goal each level through 15.
# with the Variable Goal System of adding 5 lines per level, the player is required to clear 600 lines
# by level 15. 
# 
# This system also includes line bonuses to help speed up the game.
# To speed up the process of “clearing” 600 lines, in the Variable Goal System the number of Line
# Clears awarded for any action is directly based off the score of the action performed (score
# at level 1 / 100 = Total Line Clears
goal=5

already_hold=false       #
score=0                  # score variable initialization
level=1                  # level variable initialization
lines_completed=0        # completed lines counter initialization
discard_cmds_timepoint=0 # cmds issued before this time is discarded

current_tty=$(
  ps -p $$ | tail -n 1 | (
    set $(cat)
    printf "$2"
  )
)

# screen_buffer is variable, that accumulates all screen changes
# this variable is printed in controller once per game cycle
puts() {
  screen_buffer="$screen_buffer""$1"
}

# move cursor to (x,y) and print string
# (1,1) is upper left corner of the screen
xyprint() {
  puts "\033[${2};${1}H${3}"
}

show_cursor() {
  printf "\033[?25h"
}

hide_cursor() {
  printf "\033[?25l"
}

# foreground color
set_fg() {
  $no_color && return
  puts "\033[38;5;${1}m"
  # puts "\033[3${1}m"
}

# background color
set_bg() {
  $no_color && return
  puts "\033[48;5;${1}m"
  # puts "\033[4${1}m"
}

reset_colors() {
  puts "\033[0m"
}

set_bold() {
  puts "\033[1m"
}

# playfield is 2-dimensional array, data is stored as follows:
# a_{y,x}
#   x - 0, ..., (PLAYFIELD_W-1)
#   y - 0, ..., (PLAYFIELD_H-1), ..., (START_Y-1)
# each array element contains cell color value or -1 if cell is empty
redraw_playfield() {
  local x y xp yp field_cell

  y=0
  xp=$PLAYFIELD_X # don't need to set xp every cell, need on front of the line.
  while [ "$y" -lt "$PLAYFIELD_H" ]; do
    yp=$((PLAYFIELD_Y + PLAYFIELD_H - y - 1))
    xyprint $xp $yp '' # put the cursor on the front of line
    x=0
    while [ "$x" -lt "$PLAYFIELD_W" ]; do
      field_cell=$(eval echo \"\$playfield_"$y"_"$x"\")
      
      if [ "$field_cell" -eq -1 ]; then
        puts "$empty_cell"
      else
        set_fg "$field_cell"
        set_bg "$field_cell"
        puts "$filled_cell"
        reset_colors
      fi
      x=$((x + 1))
    done
    y=$((y + 1))
  done
}

update_score() {
  # Arguments: 1 - ACTION name. ex: ACTION_SINGLE
  local factor

  eval factor=\"\$SCORE_FACTOR_"$1"\"

  case "$1" in
    "$ACTION_SINGLE")
      lines_completed=$((lines_completed + factor / 100)) # with Awarded Line Clears
      score=$((score + level * factor))
      ;;
    "$ACTION_DOUBLE")
      lines_completed=$((lines_completed + factor / 100))
      score=$((score + level * factor))
      ;;
    "$ACTION_TRIPLE")
      lines_completed=$((lines_completed + factor / 100))
      score=$((score + level * factor))
      ;;
    "$ACTION_TETRIS")
      lines_completed=$((lines_completed + factor / 100))
      score=$((score + level * factor))
      ;;
    "$ACTION_SOFT_DROP")
      score=$((score + factor))
      ;;
    "$ACTION_HARD_DROP")
      score=$((score + factor))
      ;;
  esac

  [ "$level" -le "$LEVEL_MAX" ]      &&
  [ "$lines_completed" -ge "$goal" ] && {
    goal=$((goal + level * 5))             # adding an additional five lines to the Goal
    level=$((level + 1))                   # increment level
    pkill -USR1 -t "$current_tty" ${0##*/} # and send SIGUSR1 signal to all instances of this script (please see ticker for more details)
  }

  set_bold
  set_fg "$SCORE_COLOR"
  xyprint "$SCORE_X" "$SCORE_Y"       "│SCORE: "
  xyprint "$SCORE_X" $((SCORE_Y + 1)) "│$score"
  xyprint "$SCORE_X" $((SCORE_Y + 2)) "│"
  xyprint "$SCORE_X" $((SCORE_Y + 3)) "│LINES   $lines_completed"
  xyprint "$SCORE_X" $((SCORE_Y + 4)) "│LEVEL   $level"
  xyprint "$SCORE_X" $((SCORE_Y + 5)) "│GOAL    $goal"
  reset_colors
}

fill_bag() {
  bag=$(
    echo \
"$O_TETORIMINO
$I_TETORIMINO
$T_TETORIMINO
$L_TETORIMINO
$J_TETORIMINO
$S_TETORIMINO
$Z_TETORIMINO" |
    awk '{print rand() " " $0}' | 
    sort -k1 | 
    cut -d' ' -f2 | 
    (
      while read piece; do
        printf "$piece"' '
      done
    )
  )

  # bag=$(
  #   shuf -e $O_TETORIMINO $I_TETORIMINO $T_TETORIMINO $L_TETORIMINO $J_TETORIMINO $S_TETORIMINO $Z_TETORIMINO |
  #   (
  #     while read piece; do
  #       printf "$piece"' '
  #     done
  #   )
  # )
}

#  the Tetrimino at the front of the line in the bag is placed at the end of the Next Queue
feed_next_queue() {
  local poped

  [ -z "$bag" ] && fill_bag       # if bag is empty, then fill the bag.
  set $(echo "$bag")
  poped="$1"; shift; bag="$*"     # pop the tetorimino
  next_queue="$next_queue $poped" # place tetorimino at the end of the Next Queue
}

get_next() {
  local next_piece

  set $(echo "$next_queue")
  next_piece="$1"; # peek the next piece

  #next piece becomes current
  current_piece="$next_piece"
  current_piece_rotation="$NORTH"

  # place current at the top of play field.
  current_piece_x="$START_X"
  current_piece_y="$START_Y"

  # check if piece can be placed at this location, if not - game over
  new_piece_location_ok $current_piece_x $current_piece_y || cmd_quit
  show_current

  # now let's shift next queue
  clear_next
  shift; next_queue="$*" # pop the next piece from the front of queue
  feed_next_queue        # push tetorimino into queue; keep queue size
  show_next
}

hold_tetorimino() {
  #  Between Holds, A Lock Down must take place. reset this flag in move_piece().
  "$already_hold" && return
  already_hold=true

  # if hold queue is empty,
  [ -z "$hold_queue" ] && {
    hold_queue="$current_piece" # hold current tetorimino
    clear_current
    get_next                    # the Next Tetrimino is generated from the Next Queue and begins to fall
    show_hold
    return
  }
  clear_current
  clear_hold

  # swap piece
  held_piece="$hold_queue"
  hold_queue="$current_piece"
  current_piece="$held_piece"
  
  # beginning from its generation position and North Facing orientation.
  current_piece_x="$START_X"
  current_piece_y="$START_Y"
  current_piece_rotation="$NORTH"

  show_hold
}

draw_piece() {
  # Arguments:
  #   1 - x, 2 - y, 3 - type, 4 - rotation, 5 - cell content, 6 - mask with playfield
  
  local posx posy type rotation content lx ly x y mask

  # at first, we should save arguments.
  posx="$1"; posy="$2"; type="$3"; rotation="$4"; content="$5"; mask="${6:-false}"
  shift $#

  # set minos coordinates.
  set $(eval echo \"\$piece_"$type"_minos_"$rotation"\")

  # loop through tetorimino minos: 4 minos, each has 2 coordinates
  while [ $# -gt 0 ]; do
    # relative coordinates are retrieved bassed on orientation and added to absolute coordinates
    lx=$1; ly=$2
    x=$((posx + lx * 2)) # the width of cell is 2 characters thick
    y=$((posy + ly))

    "$mask"                                         &&
    [ "$y" -ge "$PLAYFIELD_Y" ]                     &&
    [ "$y" -lt $((PLAYFIELD_Y + PLAYFIELD_H)) ]     &&
    [ "$x" -ge "$PLAYFIELD_X" ]                     &&
    [ "$x" -lt $((PLAYFIELD_X + PLAYFIELD_W * 2)) ] && xyprint $x $y "$content" # draw mino within playfield
    "$mask"                                         || xyprint $x $y "$content"

    shift 2
  done
}

draw_current() {
  # Arguments: 1 - string to draw single cell
  # factor 2 for x because each cell is 2 characters wide
  draw_piece $((PLAYFIELD_X + current_piece_x * 2)) $((PLAYFIELD_Y + PLAYFIELD_H - 1 - current_piece_y)) $current_piece $current_piece_rotation "$1" true
}

show_current() {
  local color
  eval color=\"\$piece_"$current_piece"_color\"
  set_fg "$color"
  set_bg "$color"
  draw_current "$filled_cell"
  reset_colors
}

clear_current() {
  draw_current "$empty_cell"
}

draw_next() {
  # Arguments: 1 - if show, set true.
  local color show x y content

  x="$NEXT_X"; y="$NEXT_Y"; show="$1"
  shift $#
  set $(echo "$next_queue")
  while [ $# -gt 0 ]; do
    content='  '
    "$show" && {
      eval color=\"\$piece_"$1"_color\"
      set_fg "$color"
      set_bg "$color"
      content="$filled_cell"
    }
    draw_piece "$x" "$y" "$1" "$NORTH" "$content"
    "$show" && reset_colors
    shift
    y=$((y + 3))
  done
}

show_next() {
  draw_next true
}

clear_next() {
  draw_next false
}

draw_hold() {
  # Arguments: 1 - if show hold, set true. if not, false.
  local show="$1" color

  [ -z "$hold_queue" ] && return

  content='  '
  "$show" && {
    eval color=\"\$piece_"$hold_queue"_color\"
    set_fg "$color"
    set_bg "$color"
    content="$filled_cell"
  }
  draw_piece $((HOLD_X)) $((HOLD_Y)) $hold_queue "$NORTH" "$content"
  "$show" && reset_colors
}

show_hold() {
  draw_hold true
}

clear_hold() {
  draw_hold false
}

new_piece_location_ok() {
  # Arguments: 1 - new x coordinate of the piece, 2 - new y coordinate of the piece
  # test if piece can be moved to new location

  local x_test y_test x y lx ly field_cell

  x_test="$1"; y_test="$2" # at first, we should preserve the parameters ...
  shift $#                 # .. and we shift all.

  # set minos coordinates into parameters
  # $1 - x, $2 - y
  set $(eval echo \"\$piece_"$current_piece"_minos_"$current_piece_rotation"\")
  
  # loop through tetorimino minos: 4 minos, each has 2 coordinates
  while [ $# -gt 0 ]; do
    lx="$1"; ly="$2"
    x=$((x_test + lx)) # new x coordinate of piece cell
    y=$((y_test - ly)) # new y coordinate of piece cell

    [ "$y" -lt 0 ]              || 
    [ "$x" -lt 0 ]              || 
    [ "$x" -ge "$PLAYFIELD_W" ] && return 1 # false; check if we are out of the play field

    field_cell=$(eval echo \"\$playfield_"$y"_"$x"\")
    [ "$field_cell" != -1 ] && return 1    # false; check if location is already occupied
  
    shift 2 # shift to next minos coordinates
  done
  return 0
}

draw_border() {
  local x1 x2 y1 y2 i x y

  set_bold
  set_fg $BORDER_COLOR
  x1=$((PLAYFIELD_X - 1))               # 1 here is because border is 1 characters thick
  x2=$((PLAYFIELD_X + PLAYFIELD_W * 2)) # 2 here is because each cell on play field is 2 characters wide
  y1=$((PLAYFIELD_Y - 1))
  y2=$((PLAYFIELD_Y + PLAYFIELD_H))

  i=0
  while [ "$i" -lt "$PLAYFIELD_H" ]; do
    y=$((i + PLAYFIELD_Y))
    xyprint $x1 $y "│"
    xyprint $x2 $y "│"
    i=$((i + 1))
  done
  
  i=0
  while [ "$i" -lt "$PLAYFIELD_W" ]; do
    x=$((i * 2 + PLAYFIELD_X)) # 2 here is because each cell on play field is 2 characters width
    xyprint $x $y1 '──'
    xyprint $x $y2 '──'
    i=$((i + 1))
  done
  
  xyprint $x1 $y1 "┌"; xyprint $x2 $y1 "┐" # draw the corners
  xyprint $x1 $y2 "└"; xyprint $x2 $y2 "┘"

  reset_colors
}

# this function updated occupied cells in playfield array after piece is dropped
flatten_playfield() {
  local color lx ly x y

  eval color=\"\$piece_"$current_piece"_color\"

  # set minos coordinates into parameters
  # $1 - x, $2 - y
  set $(eval echo \"\$piece_"$current_piece"_minos_"$current_piece_rotation"\")
  
  # loop through tetorimino minos: 4 minos, each has 2 coordinates
  while [ $# -gt 0 ]; do
    lx="$1"; ly="$2"
    x=$((current_piece_x + lx))
    y=$((current_piece_y - ly))
    eval playfield_"$y"_"$x"="$color"
    shift 2 # shift to next minos coordinates
  done
}

is_line_completed() {
  # Arguments: 1 - line y of playfield you want to check
  # check the line is completed
  local x line_y="$1"

  x=$((PLAYFIELD_W - 1))
  while [ "$x" -ge 0 ]; do
    field_cell=$(eval echo \"\$playfield_"$line_y"_"$x"\")
    [ "$field_cell" -eq -1 ] && return 1 # false. empty cell found
    x=$((x - 1))
  done;

  return 0 # true
}

# this function goes through playfield array and eliminates lines without empty cells
process_complete_lines() {
  local x y yi completed_lines field_cell completed_lines_count action

  completed_lines=''
  y=0
  while [ "$y" -lt "$PLAYFIELD_H" ]; do
    is_line_completed "$y" && completed_lines="$completed_lines $y"
    y=$((y + 1))
  done

  eval completed_lines=\'$(echo "$completed_lines")\'  # Strip whitespace  from the beginning and end of a string
  [ -z "$completed_lines" ] && return "$ACTION_NONE"
  set $(echo "$completed_lines")
  completed_lines_count=$#

  # move lines down. move cells from y to yi
  y=-1; yi=0
  while [ "$y" -lt "$START_Y" ]; do
    y=$((y + 1))
    [ $# -gt 0 ]      &&
    [ "$1" -eq "$y" ] && {
      shift
      continue
    }
    [ "$y" -eq "$yi" ] && { # dont need to swap if y equals yi.
      yi=$((yi + 1))
      continue
    }

    x=$((PLAYFIELD_W - 1))
    while [ "$x" -ge 0 ]; do
      field_cell=$(eval echo \"\$playfield_"$y"_"$x"\")
      eval playfield_"$yi"_"$x"=\"$field_cell\"
      x=$((x - 1))
    done
    yi=$((yi + 1))
  done

  # now let's mark lines from line yi to top line of the playfield as free.
  while [ "$yi" -le "$START_Y" ]; do
    x=$((PLAYFIELD_W - 1))
    while [ "$x" -ge 0 ]; do
      eval playfield_"$yi"_"$x"=-1
      x=$((x - 1))
    done
    yi=$((yi + 1))
  done

  action="$ACTION_NONE"
  case "$completed_lines_count" in
    1) action="$ACTION_SINGLE" ;;
    2) action="$ACTION_DOUBLE" ;;
    3) action="$ACTION_TRIPLE" ;;
    4) action="$ACTION_TETRIS" ;;
  esac
  return "$action"
}

process_fallen_piece() {
  flatten_playfield
  process_complete_lines; action="$?"
  [ "$action" -eq "$ACTION_NONE" ] && return
  update_score "$action"
  redraw_playfield
  discard_cmds
}

move_piece() {
  # arguments: 1 - new x coordinate, 2 - new y coordinate
  # moves the piece to the new location if possible

  if new_piece_location_ok "$1" "$2"; then    # if new location is ok
    clear_current                             # let's wipe out piece current location
    current_piece_x="$1"                      # update x ...
    current_piece_y="$2"                      # ... and y of new location
    show_current                              # and draw piece in new location
    return 0                                  # nothing more to do here
  fi                                          # if we could not move piece to new location
  [ "$2" -eq "$current_piece_y" ] && return 0 # and this was not horizontal move
  process_fallen_piece                        # let's finalize this piece
  get_next                                    # and start the new one
  already_hold=false                          # player can hold the falling tetorimino.
  return 1
}

rotate_piece() {
  # arguments: 1 - rotation direction; 1: clockwise; -1: counter-clockwise
  local direction="$1" old_rotation new_rotation
  
  old_rotation=$current_piece_rotation                             # preserve current orientation
  new_rotation=$((old_rotation + direction + 4))
  new_rotation=$((new_rotation % 4))                               # calculate new orientation
  current_piece_rotation=$new_rotation                             # set orientation to new
  if new_piece_location_ok $current_piece_x $current_piece_y; then # check if new orientation is ok
    current_piece_rotation=$old_rotation                           # if yes - restore old rotation ...
    clear_current                                                  # ... clear piece image 
    current_piece_rotation=$new_rotation                           # ... set new orientation
    show_current                                                   # ... draw piece with new orientation
  else                                                             # if new orientation is not ok
    current_piece_rotation=$old_rotation                           # restore old orientation
  fi
}

draw_help() {
  local show="$1" x y

  x="$HELP_X"; y="$HELP_Y"

  set_bold
  set_fg "$HELP_COLOR"

  additional_buffer=$(
    echo "$help" | {
      # in this process, the change of screen_buffer is ignored out of this process. 
      # should return the buffer.
      screen_buffer=''
      while read line; do
        "$show" || {
          empty_line=''; i=0
          while [ "$i" -lt ${#line} ]; do empty_line="$empty_line "; i=$((i + 1)); done
          line="$empty_line"
        }
        eval xyprint \"$x\" \"$y\" \'"$line"\'
        y=$((y + 1))
      done
      echo "$screen_buffer"
    }
  )
  puts "$additional_buffer"
  reset_colors
}

discard_cmds() {
  discard_cmds_timepoint=$(date +%s)
}

reload_screen() {
  clear
  toggle_color
  toggle_color
}

toggle_help() {
  local show=false
  help_on=$((-help_on))
  [ "$help_on" -eq 1 ] && show=true
  draw_help "$show"
}

toggle_color() {
  $no_color && no_color=false || no_color=true
  show_next
  show_hold
  update_score "$ACTION_NONE"
  toggle_help
  toggle_help
  draw_border
  redraw_playfield
  show_current
}

cmd_right(){
  move_piece $((current_piece_x + 1)) "$current_piece_y"
}

cmd_left() {
  move_piece $((current_piece_x - 1)) "$current_piece_y"
}

cmd_fall() {
  move_piece "$current_piece_x" $((current_piece_y - 1))
}

cmd_soft_drop() {
  move_piece "$current_piece_x" $((current_piece_y - 1)) && update_score "$ACTION_SOFT_DROP"
}

cmd_hard_drop() {
  # move piece all way down
  while move_piece $current_piece_x $((current_piece_y - 1)); do
    update_score "$ACTION_HARD_DROP"
  done
}

cmd_rotate_cw() {
  rotate_piece 1
}

cmd_rotate_ccw() {
  rotate_piece -1
}

cmd_hold() {
  hold_tetorimino
}

cmd_quit() {
  showtime=false                                      # let's stop controller ...
  pkill -USR2 -t "$current_tty" ${0##*/}              # ... send SIGUSR2 to all script instances to stop forked process ...
  xyprint $GAMEOVER_X $GAMEOVER_Y 'Game Over!'
  xyprint 0 $((PLAYFIELD_Y + PLAYFIELD_H + 1)) '> Quit' # put message at bottom of playfield so that game screen will keep its shape. 
  echo "$screen_buffer"                        # ... and print final message
}

init() {
  local x y i

  # playfield is initialized with -1s (empty cells)
  # x of playfield - 0, ..., (PLAYFIELD_W-1)
  # y of playfield - 0, ..., (PLAYFIELD_H-1), ..., (START_Y)
  y=0
  while [ "$y" -le "$START_Y" ]; do
    x=0
    while [ "$x" -lt "$PLAYFIELD_W" ]; do
      eval playfield_"$y"_"$x"=-1
      x=$((x + 1))
    done
    y=$((y + 1))
  done

  # prepare next queue filled with NEXT_MAX tetorimino 
  i=0
  while [ "$i" -lt "$NEXT_MAX" ]; do
    feed_next_queue
    i=$((i + 1))
  done

  screen_buffer=''
  clear
  hide_cursor
  get_next
  toggle_color
}

# this function runs in separate process
# it sends DOWN commands to controller with appropriate delay
ticker() {
  # on SIGUSR2 this process should exit
  trap exit USR2
  # on SIGUSR1 fall speed should be increased, this happens during level ups
  trap 'level=$((level + 1))' USR1

  # the game level, which SIGUSR1 counts up.
  level=1

  while true ; do 
    echo "$(date +%s) $FALL" # <timestamp> <cmd>
    eval sleep \"\$FALL_SPEED_LEVEL_$level\"
  done
}

# this function processes keyboard input
reader() {
  trap exit USR2 # this process exits on SIGUSR2
  trap '' USR1   # SIGUSR1 is ignored
  local key a='' b='' cmd esc_ch='1b'

  stty -echo # disable terminal local echo (echoback)
  while true ;do
    # read one key, and convert to hex value
    key=$(stty -icanon; dd ibs=1 count=1 2>/dev/null | od -An -tx1)
    cmd=''
    # echo "$a$b$key" # For debugging to check the input sequence.
    case "$a$b$key" in
      *"$esc_ch $esc_ch") # 2 escapes
        cmd="$QUIT"
        ;;
      *"$esc_ch 5b 41")   # 'up-cursor'
        cmd="$ROTATE_CW"
        ;;
      *"$esc_ch 5b 42")   # 'down-cursor'
        cmd="$SOFT_DROP"
        ;;
      *"$esc_ch 5b 43")   # 'right-cursor'
        cmd="$RIGHT"
        ;;
      *"$esc_ch 5b 44")   # 'left-cursor'
        cmd="$LEFT"
        ;;
      *'20')              # ' '
        cmd="$HARD_DROP"
        ;;
      *'63')              # 'c'
        cmd="$HOLD"
        ;;
      *'78')              # 'x'
        cmd="$ROTATE_CW"
        ;;
      *'7a')              # 'z'
        cmd="$ROTATE_CCW"
        ;;
      *'43')              # 'C'
        cmd="$TOGGLE_COLOR"
        ;;
      *'52')              # 'R'
        cmd="$RELOAD_SCREEN"
        ;;
      *'48')              # 'H'
        cmd="$TOGGLE_HELP"
        ;;
      *'51')              # 'Q'
        cmd="$QUIT"
        ;;
    esac
    a=$b   # preserve previous keys
    b=$key
    [ -n "$cmd" ] && echo "$(date +%s) $cmd" # if not empty string
  done
}

controller() {
  # SIGUSR1 and SIGUSR2 are ignored
  trap '' USR1 USR2
  local cmd commands statement issued_time
  
  # initialization of commands array with appropriate functions
  eval commands_"$QUIT"=cmd_quit
  eval commands_"$RIGHT"=cmd_right
  eval commands_"$LEFT"=cmd_left
  eval commands_"$ROTATE_CW"=cmd_rotate_cw
  eval commands_"$ROTATE_CCW"=cmd_rotate_ccw
  eval commands_"$FALL"=cmd_fall
  eval commands_"$SOFT_DROP"=cmd_soft_drop
  eval commands_"$HARD_DROP"=cmd_hard_drop
  eval commands_"$HOLD"=cmd_hold
  eval commands_"$RELOAD_SCREEN"=reload_screen
  eval commands_"$TOGGLE_COLOR"=toggle_color
  eval commands_"$TOGGLE_HELP"=toggle_help

  init

  while $showtime; do               # run while showtime variable is true, it is changed to false in cmd_quit function
    echo "$screen_buffer"           # output screen buffer ...
    screen_buffer=""                # ... and reset it
    
    # read next command from stdout
    # skip cmds issued before discard_cmds_timepoint
    while read statement; do
      set $(echo "$statement")
      issued_time="$1"; cmd="$2"
      shift $#
      [ "$issued_time" -gt "$discard_cmds_timepoint" ] && break
    done
    eval eval \"\$commands_"$cmd"\" # run command
  done
}

stty_g=`stty -g` # let's save terminal state

# output of ticker and reader is joined and piped into controller
(
  ticker & # ticker runs as separate process
  reader
) | (
  controller
)

# (
#   ticker & # ticker runs as separate process
#   reader
# ) 2> /dev/null | (
#   controller
# ) 2> /dev/null

sleep 1
wait

show_cursor
stty "$stty_g" # let's restore terminal state
